% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/filter.R
\name{fastqPairedFilter}
\alias{fastqPairedFilter}
\title{fastqPairedFilter filters and trims paired forward and reverse fastq files.}
\usage{
fastqPairedFilter(fn, fout, maxN = c(0, 0), truncQ = c(2, 2),
  truncLen = c(0, 0), trimLeft = c(0, 0), minQ = c(0, 0), maxEE = c(Inf,
  Inf), n = 1e+06, compress = TRUE, verbose = FALSE)
}
\arguments{
\item{fn}{(Required). A \code{character(2)} naming the paths to the forward/reverse fastq files.}

\item{fout}{(Required). A \code{character(2)} naming the path to the output file.

FURTHER ARGUMENTS can be provided as a length 1 or length 2 vector. If provided as a length 1
vector the same criteria is used for forward and reverse. If provided as a length 2 vector, the
first value is used for the forward reads, the second value for the reverse reads.}

\item{maxN}{(Optional). After truncation, sequences with more than maxN Ns will be discarded.
   Default is 0. Currently dada() does not allow Ns.}

\item{truncQ}{(Optional). Truncate reads at the first instance of a quality score less than
   or equal to truncQ. Default is 2, a special quality score indicating the end of good quality
   sequence in Illumina 1.8+. Can provide truncQ as an integer or appropriate ascii encoding.}

\item{truncLen}{(Optional). A \code{numeric(1)} Truncate after truncLen bases, reads shorter than
   this are discarded. THIS PARAMETER TRIMS ALL READS TO THE SAME LENGTH WHICH IS NEEDED FOR THE
   dada() FUNCTION!}

\item{trimLeft}{(Optional). Remove trimLeft nucleotides from the start of each read. If both
   truncLen and trimLeft are used, all filtered reads will have length truncLen-trimLeft.}

\item{minQ}{(Optional). After truncation, reads contain a quality score below minQ will be discarded.}

\item{maxEE}{(Optional). After truncation, reads with higher than maxEE "expected errors" will be discarded.
 Expected errors are calculated from the nominal definition of the quality score: EE = sum(10^(-Q/10))}

\item{n}{(Optional). The number of records (reads) to read in and filter at any one time.
 This controls the peak memory requirement so that very large fastq files are supported.
 Default is \code{1e6}, one-million reads. See \code{\link{FastqStreamer}} for details.}

\item{compress}{(Optional). A \code{logical(1)} indicating whether the output should be gz compressed.}

\item{verbose}{(Optional). A \code{logical(1)}. If TRUE, some status messages are displayed.}
}
\description{
fastqPairedFilter takes in two input fastq file (can be compressed), filters them based on several
user-definable criteria, and outputs those reads which pass the filter in both directions along
with their associated qualities to two new fastq file (also can be compressed). Several functions
in the ShortRead package are leveraged to do this filtering. The filtered forward/reverse reads
remain identically ordered.
}
\details{
fastqPairedFilter replicates most of the functionality of the fastq_filter command in usearch
(http://www.drive5.com/usearch/manual/cmd_fastq_filter.html) but only pairs of reads that both
pass the filter are retained.
}
\examples{
testFastqF = system.file("extdata", "sam1F.fastq.gz", package="dada2")
testFastqR = system.file("extdata", "sam1R.fastq.gz", package="dada2")
filtFastqF <- tempfile(fileext=".fastq.gz")
filtFastqR <- tempfile(fileext=".fastq.gz")
fastqPairedFilter(c(testFastqF, testFastqR), c(filtFastqF, filtFastqR), maxN=0, maxEE=2)
fastqPairedFilter(c(testFastqF, testFastqR), c(filtFastqF, filtFastqR), trimLeft=c(10, 20), truncLen=c(240, 200), maxEE=2, verbose=TRUE)
}
\seealso{
\code{\link{fastqFilter}}

\code{\link[ShortRead]{FastqStreamer}}

\code{\link[ShortRead]{srFilter}}

\code{\link[ShortRead]{trimTails}}
}

