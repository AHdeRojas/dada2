// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/dadac.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// dada_uniques
Rcpp::DataFrame dada_uniques(std::vector< std::string > seqs, std::vector< int > abundances);
RcppExport SEXP dadac_dada_uniques(SEXP seqsSEXP, SEXP abundancesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector< std::string > >::type seqs(seqsSEXP );
        Rcpp::traits::input_parameter< std::vector< int > >::type abundances(abundancesSEXP );
        Rcpp::DataFrame __result = dada_uniques(seqs, abundances);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// dada_from_file
int dada_from_file(std::string filename);
RcppExport SEXP dadac_dada_from_file(SEXP filenameSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP );
        int __result = dada_from_file(filename);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int dadac_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP dadac_RcppExport_registerCCallable() { 
    R_RegisterCCallable("dadac", "dadac_RcppExport_validate", (DL_FUNC)dadac_RcppExport_validate);
    return R_NilValue;
}
